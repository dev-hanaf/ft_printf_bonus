1 => get numbers before '.' to add sapces * "the gettin number - count".
2 => should handle ft_bonus(char f,int fd) to be able to count flags on each concatination ex:"%5.5d %+d"
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
printf("%10.d",100); - The field width is 10 and the precision is not specified. The number 100 is printed with leading spaces to make the total width 10.

printf("%.10d",100); - The field width is not specified and the precision is 10. The number 100 is printed with leading zeros to make the total number of digits 10.

printf("%10.10d",100); - The field width is 10 and the precision is 10. The number 100 is printed with leading zeros to make the total number of digits 10. If the number of digits is less than the field width, additional spaces are printed before the number.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3 => step to upgrade my code to be norminated and working at the next flag '-' and handle the return count
4 => working on '0' flag
5 => cheack if the '0' is a flag or just a number
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
printf("%-5d",100); - the field witdh normaly added spaces on the right but will reverse it ""
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6 => go to the next flag u (copy past) change only the type
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7 => %s: Basic string formatting.
    %.s: An empty precision specification. It will print an empty string.
    %10s: Right-justify the string within a field of width 10, padding with spaces on the left.
    %-10s: Left-justify the string within a field of width 10, padding with spaces on the right.
    %10.5s: Right-justify the string within a field of width 10, and limit the string to 5 characters (precision).
    %-10.5s: Left-justify the string within a field of width 10, and limit the string to 5 characters (precision).
    Here's a quick breakdown:

    %s: Basic string formatting.
    . (precision):
    %.s: Empty precision, prints an empty string.
    %10.5s: Specifies a precision of 5 characters, limiting the string to that length.
    0 (zero-padding):
    %010s: Zero-padding on the left to reach a field width of 10.
    - (left-justify):
    %-10s: Left-justifies the string within a field of width 10.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8 => %x %p almost done on . ' ' 0
9 => adding + check on %d and %i

